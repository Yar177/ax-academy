import Foundation

/// An enumeration describing analytics events generated by the app.  Events
/// capture user interactions such as completing a lesson or tapping a
/// particular button.  Keeping the event definitions in a central location
/// makes it easy to audit what data is collected and to update the schema.
public enum AnalyticsEvent: Equatable {
    /// Called when a lesson is started for a given grade and topic.
    case lessonStarted(grade: String, lessonID: String)
    /// Called when a lesson is completed successfully.
    case lessonCompleted(grade: String, lessonID: String)
    /// Called when a question is answered.  The associated value tracks
    /// whether the answer was correct.
    case questionAnswered(correct: Bool)
    /// Called when a feature screen is shown.  Useful for measuring
    /// engagement.
    case screenPresented(name: String)
    /// Triggered when the caregiver dashboard is opened.
    case caregiverDashboardViewed
    /// Triggered when a caregiver exports or shares a learner summary.
    case caregiverSummaryShared
    /// Triggered when consent is updated by a caregiver.
    case consentUpdated
    /// Fired whenever remote configuration is fetched successfully.
    case remoteConfigFetched
    /// Fired when remote configuration fails to load.
    case remoteConfigFetchFailed(reason: String)
    /// Logged when the app prompts the caregiver to install an update.
    case updatePromptShown(minimumVersion: String)
    /// Logged when the app enters or exits safe mode due to network outages.
    case safeModeChanged(isEnabled: Bool)
}

/// A protocol for analytics logging.  This allows the app to collect
/// behavioural data without coupling to a specific analytics SDK.  In
/// production the implementation might forward events to a server, whereas
/// tests can substitute a mock implementation.
public protocol AnalyticsLogging {
    /// Records an analytics event.
    func log(event: AnalyticsEvent)
}

/// A no‑op analytics logger used in environments where analytics should be
/// disabled.  This is the default implementation registered in the
/// `DependencyContainer` if no other logger is provided.
public final class NoopAnalyticsLogger: AnalyticsLogging {
    public init() {}
    public func log(event: AnalyticsEvent) {
        // Intentionally left blank – avoids any side effects.
    }
}